name: Test Negative
on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: echo "Do setup"

  create-release:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: create-release
        run: |
          release_name="${PREFIX}$(git rev-parse --short HEAD)"
          gh release create ${release_name} --prerelease --target ${{ github.sha }} --notes "Created by ${{ github.workflow }} (will be automatically deleted)."
          echo "name=${release_name}" > $GITHUB_OUTPUT
          echo "tag=$(gh release view ${release_name} --json tagName -q '.tagName')" >> $GITHUB_OUTPUT
        env:
          # Below is the main difference between this workflow's positive counterpart.
          # The action will not pick up a comment because the provided 'include_regex' will not be able to match it.
          PREFIX: "v0.0.0-test.exclude."
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      name: ${{ steps.create-release.outputs.name }}
      tag: ${{ steps.create-release.outputs.tag }}

  assert:
    runs-on: ubuntu-latest
    needs: [create-release]
    outputs:
      comment_id: ${{ steps.comment-id.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./
        with:
          tag: ${{ needs.create-release.outputs.tag }}
          include_regex: 'v0\.0\.0-test\.include\..*' # Should NOT find a comment

      # Unfortunately, because the cloudposse/cloudposse-github-actions requires these tests to be in a workflow_dispatch,
      # We cannot relay the PR# and have to get all issue comments (PRs are considered issues) and identify whether its
      # body contains the tag name. This is not perfect, but it prevents major refactoring of the test-related reusable
      # workflows which exist outside of this repository.
      - name: Find Comment
        uses: octokit/request-action@v2.x
        id: fc
        continue-on-error: true
        with:
          route: GET /repos/{owner}/{repo}/issues/comments
          owner: ${{ github.event.pull_request.head.repo.owner.login }}
          repo: ${{ github.event.pull_request.base.repo.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Succeed if comment was not found
        if: ${{ always() && !contains(fromJSON(steps.fc.outputs.data).*.body, needs.create-release.outputs.name) }}
        run: |
          exit 0

      - name: Fail if comment was found
        if: ${{ always() && contains(fromJSON(steps.fc.outputs.data).*.body, needs.create-release.outputs.name) }}
        run: |
          exit 1

      - id: comment-id
        run: |
          echo result=$(echo '${{ steps.fc.outputs.data }}' | jq -cr 'map(select(.body | contains("${{ needs.create-release.outputs.name }}")) | .id)[0]') >> $GITHUB_OUTPUT

  teardown:
    runs-on: ubuntu-latest
    needs: [create-release, assert]
    if: ${{ always() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Delete Test Release + Tag
        if: needs.create-release.result == 'success'
        run: gh release delete ${{ needs.create-release.outputs.name }} --cleanup-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: octokit/request-action@v2.x
        name: Delete Test Release Comment
        if: ${{ always() && needs.assert.outputs.comment_id != 0 }}
        with:
          route: DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}
          owner: ${{ github.event.pull_request.head.repo.owner.login }}
          repo: ${{ github.event.pull_request.base.repo.name }}
          comment_id: ${{ needs.assert.outputs.comment_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
