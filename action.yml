name: "PR Comment on Release"
description: "Comments on a (merged) PR when it is included in a GitHub release."
author: hello@cloudposse.com
branding:
  icon: "file"
  color: "white"
inputs:
  retries:
    required: false
    description: "Number of retries"
    default: "3"
  include_regex:
    required: false
    description: |
      Only include releases whose tag name matches this regular expression.
      This regular expression should not include delimeters. i.e. instead of `/.*/g`, supply only `.*`.
    default: ".*"
  tag:
    required: false
    description: "The git tag used to determine the release. If omitted, the release will be determined from `github.event.release.id`."
    default: ""
runs:
  using: "composite"
  steps:
    - uses: actions/github-script@v7
      env:
        TAG: ${{ inputs.tag }}
        INCLUDE_REGEX: ${{ inputs.include_regex }}
      with:
        result-encoding: string
        retries: ${{ inputs.retries }}
        script: |
          const { TAG, INCLUDE_REGEX } = process.env

          switch(context.eventName) {
            case ('release'):
              if (TAG != "") {
                core.warning(`'tag' is reserved for testing and is not needed when running on 'release'. The release will be determined using the supplied 'tag' (${TAG}).`);
              }
              break;
            case ('workflow_run'):
              core.warning(`This action is designed to run on 'release', not 'workflow_run'. Even when corresponding to a workflow triggered by 'release', 'workflow_run' may not work due to its event context schema.`);
              break;
            case ('workflow_dispatch'):
              if (TAG === "") {
                core.setFailed(`This action is meant to only run on 'release'. 'workflow_dispatch' is reserved for testing, and 'tag' was not supplied.`);
              }
              core.warning(`This action is meant to only run on 'release'. 'workflow_dispatch' is reserved for testing. Release will be fetched using ${TAG}.`);
              break;
            default:
              core.setFailed(`The ${context.eventName} event is not supported by this action.`);
          }

          // Function to check if a value is unique in an array
          function onlyUnique(value, index, array) {
            return array.indexOf(value) === index;
          }

          // Function to create or update a comment for a pull request (PR) associated with a release
          async function createCommentForPR(pr_id, release) {
            // Parameters for fetching comments related to the PR
            const parameters = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_id,
              per_page: 100,
            }
            
            // Constructing the message to be posted or updated as a comment
            const messageId = `<!-- release-pr-comment:${release.id} -->`;
            const message = `
            ${messageId}
            These changes were released in [${release.tag_name}](${release.html_url}).
            `;
            
            // Ð¡reate a new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_id,
              body: message
            });
          }

          currentReleaseResponse = null;

          if (TAG != "") {
            console.log(`Fetching release using supplied 'tag' input (${TAG})...`);
            currentReleaseResponse = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,            
              tag: TAG,
            }); 
          } else {
            console.log("Fetching release using 'release' event payload...");
            currentReleaseResponse = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,            
              release_id: context.payload.release.id,
            });
          }
          currentRelease = currentReleaseResponse.data;

          const pattern = new RegExp(INCLUDE_REGEX);
          if (!currentTag.match(pattern)) {
            core.warning(`The supplied include_regex does not match ${currentTag}. Doing nothing.`);
            return
          }

          // Extracting tag name and target branch from the current release
          currentTag = currentRelease.tag_name;
          currentBranch = currentRelease.target_commitish;

          // Listing all releases of the repository
          releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,            
          });

          console.log(`Looking for a release prior to ${currentTag}...`);
          for (release of releases.data) {
            if (currentReleaseFound) {
              previousRelease = release;
              break;
            } else if (release.tag_name == currentTag) {
              currentReleaseFound = true;
            }
          }

          if (previousRelease == null) {
            core.setFailed(`This action requires that at least one release prior to ${currentTag} exists, regardless of "include_regex".`);
          } else {
            console.log(`Found a prior release to "${currentTag}": "${previousRelease.tag_name}"`);
          }

          // Comparing commits between the current and previous releases
          commitsResponse = await github.rest.repos.compareCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,            
            base: previousRelease.tag_name,
            head: currentRelease.tag_name,
          });

          commits = commitsResponse.data;

          // Initializing an array to store pull request numbers associated with the commits
          pull_requests = [];

          // Iterating through commits to find associated pull requests and extracting their numbers
          for (commit of commits.commits) {
            responseCommit = await github.rest.git.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,            
              commit_sha: commit.sha,
            });

            // GraphQL query to fetch details about the commit, including associated pull requests
            const query = `
              {
                resource(url: "${context.payload.repository.html_url}/commit/${commit.sha}") {
                  ... on Commit {
                    messageHeadlineHTML
                    messageBodyHTML
                    associatedPullRequests(first: 10) {
                      pageInfo { hasNextPage }
                      edges { node { number } }
                    }
                  }
                }
              }
            `;

            response = await github.graphql(query);

            // Extracting pull request numbers from the GraphQL response
            for (edge of response.resource.associatedPullRequests.edges) {
              pull_requests.push(edge.node.number);
            }
          }            

          if (pull_requests.length === 0) {
            core.warning(`No Pull Requests associated with ${currentTag} were found.`);
            return
          }

          // Iterating through unique pull request numbers and creating or updating comments for them
          for (id of pull_requests.filter(onlyUnique)) {
            console.log(`Creating a comment on PR #${id} for ${currentTag}`);
            await createCommentForPR(id, currentRelease);
          }
